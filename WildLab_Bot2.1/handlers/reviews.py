# handlers/reviews.py
from aiogram import Router, types, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from models import UserSettings, Review, Session
from states import ReviewState
from keyboards import back_button, back_button_auto, back_button_auto2, back_button_auto3
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from utils.pagination import paginate_reviews
from utils.prompts import build_prompt
import logging
import time
from typing import Union
from utils.wb_api import WildberriesAPI
from models import Review
router = Router()
logger = logging.getLogger(__name__)


# ============ –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π ============

async def get_unanswered_reviews(user_id: int) -> list:
    with Session() as session:
        user = session.get(UserSettings, user_id)
        if not user or not user.wb_api_key:
            logger.warning(f"User {user_id} has no WB API key configured")
            return []

        wb_api = WildberriesAPI(user.wb_api_key)
        try:
            reviews = await wb_api.get_unanswered_reviews()

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—É—Å—Ç—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤
            processed_reviews = []
            for review in reviews:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±—É–ª–µ–≤—ã –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–∏
                review = {k: str(v) if isinstance(v, bool) else v for k, v in review.items()}

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
                has_content = any([
                    review.get("text"),  # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ –∏–∑ API
                    review.get("pros"),
                    review.get("cons"),
                    review.get("photoLinks")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–æ—Ç–æ
                ])

                if has_content:
                    processed_reviews.append(review)

            return processed_reviews

        except Exception as e:
            logger.error(f"WB API error: {e}")
            return []


def generate_reply(prompt: str) -> str:
    return f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ."


async def send_review_reply(feedback_id: str, text: str, user_id: int) -> bool:
    with Session() as session:
        user = session.get(UserSettings, user_id)
        if not user or not user.wb_api_key:
            return False

        wb_api = WildberriesAPI(user.wb_api_key)
        return await wb_api.send_reply(feedback_id, text)

# ============ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ ============



# ============ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ============
async def check_new_reviews(bot):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"""
    logger.info("Starting scheduled reviews check")

    with Session() as session:
        try:
            users = session.query(UserSettings).all()
            for user in users:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã —á–µ—Ä–µ–∑ API
                    raw_reviews = await get_unanswered_reviews(user.user_id)
                    if not raw_reviews:
                        continue

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã –≤ –ë–î
                    new_reviews_count = 0
                    for review in raw_reviews:
                        try:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –≤ –ë–î
                            exists = session.query(Review).filter_by(
                                source_api_id=str(review["id"]),
                                user_id=user.user_id
                            ).first()

                            if not exists:
                                # –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤
                                new_review = Review(
                                    source_api_id=str(review.get("id", "")),  # –í—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞
                                    stars=int(review.get("stars", 0)),
                                    comment=str(review.get("text", "")),  # WB API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç "text", –∞ –Ω–µ "comment"
                                    pros=str(review.get("pros", "")),
                                    cons=str(review.get("cons", "")),
                                    photo_url=bool(review.get("photoLinks")),  # photoLinks –µ—Å—Ç—å –≤ API, –∞ –Ω–µ photo
                                    is_answered=False
                                )
                                session.add(new_review)
                                new_reviews_count += 1

                        except Exception as e:
                            logger.error(f"Error saving review {review.get('id')}: {str(e)}")

                    # –ö–æ–º–º–∏—Ç–∏–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–æ–º
                    session.commit()
                    logger.info(f"Saved {new_reviews_count} new reviews for user {user.user_id}")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    if user.notifications_enabled and new_reviews_count > 0:
                        try:
                            await bot.send_message(
                                user.user_id,
                                f"üì¨ –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: {new_reviews_count}",
                                parse_mode="HTML"
                            )
                        except Exception as notify_error:
                            logger.error(f"Notification error: {notify_error}")

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤
                    if user.auto_reply_enabled:
                        auto_replied = 0
                        for review in raw_reviews:
                            try:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞
                                if (user.auto_reply_five_stars
                                        and int(review.get("stars", 0)) == 5
                                        and not str(review.get("cons", "")).strip()):

                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                                    success = await send_review_reply(
                                        feedback_id=str(review["id"]),
                                        text="–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!",
                                        user_id=user.user_id
                                    )

                                    if success:
                                        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –æ—Ç–∑—ã–≤–∞
                                        with Session() as inner_session:
                                            db_review = inner_session.query(Review).filter_by(
                                                source_api_id=str(review["id"]),
                                                user_id=user.user_id
                                            ).with_for_update().first()

                                            if db_review:
                                                db_review.is_answered = True
                                                inner_session.commit()
                                                logger.info(f"Marked review {review['id']} as answered")
                                    else:
                                        logger.error(f"Failed to send reply for review {review['id']}")
                                        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É

                            except Exception as e:
                                logger.error(f"Auto-reply error: {str(e)}")

                        session.commit()
                        logger.info(f"Auto-replied to {auto_replied} reviews")

                except Exception as e:
                    logger.error(f"Error processing user {user.user_id}: {str(e)}")

        except Exception as e:
            logger.error(f"Global check error: {str(e)}")

@router.callback_query(F.data.startswith("manual_"))  # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async def start_manual_reply(callback: types.CallbackQuery, state: FSMContext):
    try:
        review_id = int(callback.data.split("_")[1])
        await state.update_data(review_id=review_id)

        builder = InlineKeyboardBuilder()
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"review_{review_id}")

        await callback.message.answer(
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤:",
            reply_markup=builder.as_markup()
        )
        await state.set_state(ReviewState.waiting_for_custom_reply)

    except Exception as e:
        logger.error(f"Error in start_manual_reply: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä—É—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")


@router.callback_query(F.data == "write_own")  # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async def write_own_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:", reply_markup=back_button_auto())
    await state.set_state(ReviewState.waiting_for_custom_reply)


@router.message(ReviewState.waiting_for_custom_reply)
async def process_custom_reply(message: types.Message, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º review_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        review_id = data.get("review_id")

        if not review_id:
            logger.error("Review ID not found in state")
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –æ—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        if not message.text:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç")
            return

        await state.update_data(generated_reply=message.text)

        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç", callback_data="send_reply")
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º callback_data
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"review_{review_id}")  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        builder.adjust(1)

        await message.answer(
            f"üìù –í–∞—à –æ—Ç–≤–µ—Ç –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ:\n{message.text}",
            reply_markup=builder.as_markup()
        )

    except Exception as e:
        logger.error(f"Error in process_custom_reply: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@router.callback_query(F.data == "back_to_current_review")
async def back_to_current_review_handler(callback: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        review_id = data.get("review_id")

        if not review_id or not isinstance(review_id, int):
            raise ValueError("Invalid review_id in state")

        # –°–æ–∑–¥–∞–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π callback —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        fake_callback = types.CallbackQuery(
            data=f"review_{review_id}",
            message=callback.message,
            from_user=callback.from_user
        )

        await review_detail_handler(fake_callback, state)

    except Exception as e:
        logger.error(f"Error in back_to_current_review_handler: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –æ—Ç–∑—ã–≤—É")


@router.callback_query(F.data == "pending_reviews")
async def reviews_list_handler(callback: types.CallbackQuery, state: FSMContext):
    await check_new_reviews(callback.bot)
    try:
        user_id = callback.from_user.id
        text_template = "üìã *–°–ø–∏—Å–æ–∫ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∑—ã–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞:"
        items_per_page = 5

        with Session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = session.get(UserSettings, user_id)
            if not user or not user.wb_api_key:
                await callback.message.edit_text(
                    "üîë –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–∑—ã–≤–∞–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API-–∫–ª—é—á –≤ —Ä–∞–∑–¥–µ–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
                    reply_markup=back_button_auto(),
                    parse_mode="Markdown"
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã –∏–∑ –ë–î
            db_reviews = session.query(Review).filter(
                Review.user_id == user_id,
                Review.is_answered == False
            ).order_by(Review.id.desc()).all()

            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –æ—Ç–∑—ã–≤—ã
            filtered_reviews = [
                r for r in db_reviews
                if any([r.comment.strip(), r.pros.strip(), r.cons.strip(), r.photo_url])
            ]

            if not filtered_reviews:
                await callback.message.edit_text(
                    "‚úÖ –í—Å–µ –æ—Ç–∑—ã–≤—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!",
                    reply_markup=back_button_auto3()
                )
                return

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            formatted_reviews = []
            for review in filtered_reviews:
                formatted_reviews.append({
                    "id": review.source_api_id,
                    "stars": review.stars,
                    "comment": review.comment,
                    "pros": review.pros,
                    "cons": review.cons,
                    "photo": bool(review.photo_url)
                })

            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            data = await state.get_data()
            current_page = data.get("page", 0)
            total_pages = (len(formatted_reviews) + items_per_page - 1) // items_per_page

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            current_page = max(0, min(current_page, total_pages - 1))
            start_idx = current_page * items_per_page
            page_reviews = formatted_reviews[start_idx:start_idx + items_per_page]

            # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            builder = InlineKeyboardBuilder()

            # –ö–Ω–æ–ø–∫–∏ –æ—Ç–∑—ã–≤–æ–≤
            for review in page_reviews:
                btn_text = (
                    f"{review['stars']}‚≠ê "
                    f"{'üì∏ ' if review['photo'] else ''}"
                    f"{review['comment'][:15]}..."
                ).strip()

                builder.button(
                    text=btn_text,
                    callback_data=f"review_{review['id']}"
                )

            # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            if total_pages > 1:
                pagination_row = []
                if current_page > 0:
                    pagination_row.append(InlineKeyboardButton(
                        text="‚óÄÔ∏è –ü—Ä–µ–¥.",
                        callback_data=f"page_{current_page - 1}"
                    ))
                pagination_row.append(InlineKeyboardButton(
                    text=f"{current_page + 1}/{total_pages}",
                    callback_data="current_page"
                ))
                if current_page < total_pages - 1:
                    pagination_row.append(InlineKeyboardButton(
                        text="–°–ª–µ–¥. ‚ñ∂Ô∏è",
                        callback_data=f"page_{current_page + 1}"
                    ))

                builder.row(*pagination_row)

            # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
            builder.row(InlineKeyboardButton(
                text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="main_menu"
            ))

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                text_template,
                reply_markup=builder.as_markup(),
                parse_mode="Markdown"
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await state.update_data(page=current_page)

    except Exception as e:
        logger.error(f"Error in pending_reviews: {str(e)}", exc_info=True)
        await callback.message.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=back_button_auto3()
        )


@router.callback_query(F.data.startswith("review_"))
async def review_detail_handler(callback: types.CallbackQuery, state: FSMContext):
    try:
        parts = callback.data.split("_")
        if len(parts) != 2 or not parts[1].isdigit():
            raise ValueError(f"Invalid review ID: {callback.data}")

        review_id = int(callback.data.split("_")[1])
        user_id = callback.from_user.id
        reviews = get_unanswered_reviews(user_id)
        review = next((r for r in reviews if r["id"] == review_id), None)
        if not review:
            await callback.message.edit_text("‚ùå –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        review_text = f"‚≠ê {review['stars']}\n"
        if review.get("photo"):
            review_text += f"üì∏ –§–æ—Ç–æ: {'–î–∞' if review.get('photo') == 'True' else '–ù–µ—Ç'}\n"
        if review.get("comment"):
            review_text += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {review['comment']}\n"
        if review.get("pros"):
            review_text += f"‚úÖ –î–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞: {review['pros']}\n"
        if review.get("cons"):
            review_text += f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏: {review['cons']}\n"

        builder = InlineKeyboardBuilder()
        builder.button(text="‚úçÔ∏è –†—É—á–Ω–æ–π –æ—Ç–≤–µ—Ç", callback_data=f"manual_{review_id}")
        builder.button(text="ü§ñ –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è", callback_data=f"generate_{review_id}")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="pending_reviews")
        builder.adjust(1)

        await callback.message.edit_text(
            f"{review_text}\n–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ—Ç–≤–µ—Ç–∞:",
            reply_markup=builder.as_markup()
        )
        await state.update_data(review_id=review_id, regeneration_count=0)

    except Exception as e:
        logger.error(f"Error in review_detail_handler: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@router.callback_query(F.data.startswith("generate_"))
async def start_generation_flow(callback: types.CallbackQuery, state: FSMContext):
    review_id = int(callback.data.split("_")[1])
    await state.update_data(review_id=review_id)
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
    await state.set_state(ReviewState.waiting_for_arguments)


@router.message(ReviewState.waiting_for_arguments)
async def process_review_arguments(message: types.Message, state: FSMContext):
    try:
        arguments = [arg.strip() for arg in message.text.split(",") if arg.strip()]
        await state.update_data(arguments=arguments)

        builder = InlineKeyboardBuilder()
        builder.button(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_solution")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_reviews")
        builder.adjust(1)

        await message.answer(
            "üí° –•–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã? (–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')",
            reply_markup=builder.as_markup()
        )
        await state.set_state(ReviewState.waiting_for_solution)

    except Exception as e:
        logger.error(f"Error in process_review_arguments: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@router.callback_query(F.data == "skip_solution", ReviewState.waiting_for_solution)
async def handle_skip_solution(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(solution=None)
    await process_generation(callback, state)


@router.message(ReviewState.waiting_for_solution)
async def process_solution(message: types.Message, state: FSMContext):
    await state.update_data(solution=message.text)
    await process_generation(message, state)


async def process_generation(source: Union[types.Message, types.CallbackQuery], state: FSMContext):
    try:
        data = await state.get_data()
        is_regenerate = data.get("is_regenerate", False)

        with Session() as session:
            user_id = source.from_user.id
            user = session.get(UserSettings, user_id)
            reviews = get_unanswered_reviews(user_id)
            review = next((r for r in reviews if r["id"] == data["review_id"]), None)

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞
            prompt = build_prompt(
                review=review,
                user=user,
                arguments=data.get("arguments", []),
                solution=data.get("solution")
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            if is_regenerate:
                prompt += "\n\n–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –¥—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏:"
                await state.update_data(is_regenerate=False)

            generated_reply = generate_reply(prompt)
            await state.update_data(generated_reply=generated_reply)

            builder = InlineKeyboardBuilder()
            builder.button(text="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="regenerate")
            builder.button(text="‚úçÔ∏è –†—É—á–Ω–æ–π –æ—Ç–≤–µ—Ç", callback_data="write_own")
            builder.button(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send_reply")
            builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_reviews")
            builder.adjust(1)

            if isinstance(source, types.Message):
                await source.answer(f"üìÑ **–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç**:\n{prompt}")
                await source.answer(f"ü§ñ –û—Ç–≤–µ—Ç:\n{generated_reply}", reply_markup=builder.as_markup())
            else:
                await source.message.answer(f"üìÑ **–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç**:\n{prompt}")
                await source.message.answer(f"ü§ñ –û—Ç–≤–µ—Ç:\n{generated_reply}", reply_markup=builder.as_markup())

    except Exception as e:
        logger.error(f"Error in process_generation: {e}")
        error_msg = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        if isinstance(source, types.Message):
            await source.answer(error_msg)
        else:
            await source.message.answer(error_msg)


@router.callback_query(F.data == "regenerate")
async def regenerate_reply(callback: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        count = data.get("regeneration_count", 0)
        if count >= 3:
            await callback.answer("–õ–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤—Ä—É—á–Ω—É—é.", show_alert=True)
            return

        await state.update_data(
            regeneration_count=count + 1,
            is_regenerate=True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è
        )

        with Session() as session:
            user = session.get(UserSettings, callback.from_user.id)
            reviews = get_unanswered_reviews(callback.from_user.id)
            review = next((r for r in reviews if r["id"] == data["review_id"]), None)

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —Å —Ñ–ª–∞–≥–æ–º –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è
            new_prompt = build_prompt(
                review=review,
                user=user,
                arguments=data.get("arguments", []),
                solution=data.get("solution")
            ) + "\n\n–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –¥—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏:"

            new_reply = generate_reply(new_prompt)
            await state.update_data(generated_reply=new_reply)

            builder = InlineKeyboardBuilder()
            builder.button(text="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="regenerate")
            builder.button(text="‚úçÔ∏è –†—É—á–Ω–æ–π –æ—Ç–≤–µ—Ç", callback_data="write_own")
            builder.button(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send_reply")
            builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_reviews")
            builder.adjust(1)

            await callback.message.edit_text(f"ü§ñ –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç:\n{new_reply}")
            await callback.message.edit_reply_markup(reply_markup=builder.as_markup())

    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback.answer("–û–±–Ω–æ–≤–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        else:
            logger.error(f"Error in regenerate_reply: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", show_alert=True)
    except Exception as e:
        logger.error(f"Error in regenerate_reply: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", show_alert=True)


@router.callback_query(F.data == "send_reply")
async def send_reply_handler(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    success = await send_review_reply(
        feedback_id=data["review_id"],
        text=data["generated_reply"],
        user_id=callback.from_user.id
    )

    if success:
        await callback.answer("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")


@router.callback_query(F.data == "back_to_reviews")
async def back_to_reviews_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await reviews_list_handler(callback, state)


@router.callback_query(F.data.startswith("page_"))
async def handle_pagination(callback: types.CallbackQuery, state: FSMContext):
    page = int(callback.data.split("_")[1])
    await state.update_data(page=page)
    await reviews_list_handler(callback, state)


# ============ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ ============

async def on_startup(dp):
    scheduler = AsyncIOScheduler()
    scheduler.add_job(check_new_reviews, 'interval', minutes=5, args=(dp.bot,))
    scheduler.start()


if __name__ == "__main__":
    from aiogram import executor

    executor.start_polling(dp, on_startup=on_startup)